/*
	https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
	box-shadow: [inset?] [top] [left] [blur] [size] [color];

	Tips:
	- We're setting all the blurs to 0 since we want a solid fill.
	- Add the inset keyword so the box-shadow is on the inside of the element
	- Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
	- Multiple shadows can be stacked
	- If you're animating multiple shadows, be sure to keep the same number of shadows so the animation is smooth. Otherwise, you'll get something choppy.
*/

.fill {
  --color: #a972cb;
  --hover: #cb72aa;
}

.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

.pulseButton {
  --color: #ef6eae;
  --hover: #ef8f6e;
}

.pulseClick,
.pulseButton:hover,
.pulseButton:focus {
  -webkit-animation: pulse 1s;
  animation: pulseButton 1s;
  box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);
}

.close {
  --color: #ff7f82;
  --hover: #ffdc7f;
}

.raise {
  --color: #000;
  --hover: #000;
}

.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  -webkit-transform: translateY(-0.25em);
  transform: translateY(-0.25em);
}

.up {
  --color: #e4cb58;
  --hover: #94e458;
}

.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

.slide {
  --color: #8fc866;
  --hover: #66c887;
}

.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

.offset {
  --color: #19bc8b;
  --hover: #1973bc;
  box-shadow: 0.3em 0.3em 0 0 var(--color), inset 0.3em 0.3em 0 0 var(--color);
}

.offset:hover,
.offset:focus {
  box-shadow: 0 0 0 0 var(--hover), inset 6em 3.5em 0 0 var(--hover);
}

button {
  color: var(--color);
  -webkit-transition: 0.25s;
  transition: 0.25s;
}

button:hover,
button:focus {
  border-color: var(--hover);
  color: #fff;
  outline: none;
}

@-webkit-keyframes pulseButton {
  0% {
    box-shadow: 0 0 0 0 var(--hover);
  }
}

@keyframes pulseButton {
  0% {
    box-shadow: 0 0 0 0 var(--hover);
  }
}

.btn-gc-blue, .btn-gc-green, .btn-gc-purple {
  color: white;
  padding: .75rem 1.5rem;
}

.btn-outline-gc-blue,
.btn-outline-gc-purple,
.btn-outline-gc-green,
.btn-outline-white {
  padding: .75rem 1.5rem;
}

.btn-gc-blue {
  background-color: var(--gc-blue);
}
.navbar-nav .btn-gc-blue {
  margin-right: 30px;
}

.btn-gc-blue:hover {
  background-color: var(--gc-blue-hover);
  color: white;
}

.btn-outline-gc-blue {
  border-color: var(--gc-blue);
  color: var(--gc-blue);
}

.btn-outline-gc-blue:hover {
  background-color: var(--gc-blue);
  color: white;
}

.btn-outline-white {
  border-color: #ffffff;
  color: #ffffff;
}

.btn-outline-white:hover {
  background: #ffffff;
  color: #3f00ff;
}

.btn-gc-green {
  background-color: var(--gc-green);
}

.btn-gc-green:hover {
  background-color: var(--gc-green-hover);
  color: white;
}

.btn-outline-gc-green {
  border-color: var(--gc-green);
  color: var(--gc-green);
}

.btn-outline-gc-green:hover {
  background-color: var(--gc-green);
  color: white;
}

.btn-outline-gc-green.btn-outline-gc-grey {
  border-color: var(--text-dark);
}

.btn-outline-gc-green.btn-outline-gc-grey:hover {
  border-color: var(--gc-green--hover);
}

.btn-gc-purple {
  background-color: var(--gc-purple);
}

.btn-gc-purple:hover {
  background-color: var(--gc-purple-hover);
  color: white;
}

.btn-outline-gc-purple {
  border-color: var(--gc-purple);
  color: var(--gc-purple);
}

.btn-outline-gc-purple:hover {
  background-color: var(--gc-purple);
  color: white;
}

/* Icons in buttons */
.btn > svg:first-child {
  margin-right: .5rem;
}
